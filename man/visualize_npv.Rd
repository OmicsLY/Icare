% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model-19-cutoff.R
\name{visualize_npv}
\alias{visualize_npv}
\title{Visualize Negative Predictive Value (NPV) Across Probability Thresholds}
\usage{
visualize_npv(
  true_labels,
  pred_prob,
  positive_class = NULL,
  target_value = NULL,
  palette_name = "AsteroidCity1",
  base_size = 14,
  save_plots = TRUE,
  save_dir = here("ModelData", "best_cutoff"),
  plot_width = 5,
  plot_height = 5
)
}
\arguments{
\item{true_labels}{A vector of true class labels (factor or character)}

\item{pred_prob}{A vector of predicted probabilities for the positive class}

\item{positive_class}{The class to consider as positive (defaults to first level if NULL)}

\item{target_value}{Optional target NPV value to approach (if NULL, maximizes NPV)}

\item{palette_name}{Name of Wes Anderson color palette to use (default: "AsteroidCity1")}

\item{base_size}{Base font size for the plot (default: 14)}

\item{save_plots}{Logical indicating whether to save the plot (default: TRUE)}

\item{save_dir}{Directory path to save plots (default: here("ModelData", "best_cutoff"))}

\item{plot_width}{Width of the saved plot in inches (default: 5)}

\item{plot_height}{Height of the saved plot in inches (default: 5)}
}
\value{
A list containing:
\itemize{
\item plot - The ggplot object showing NPV across thresholds
\item best_threshold - The optimal probability threshold
\item best_npv - The NPV value at optimal threshold
\item metrics_data - Data frame containing NPV at each threshold
\item optimization_note - Text describing optimization approach used
}
}
\description{
This function analyzes and visualizes how Negative Predictive Value (NPV) varies across
different probability thresholds for binary classification. It can either find the
threshold that maximizes NPV or the one that gets closest to a target NPV value.
}
\details{
The function calculates Negative Predictive Value (NPV) at each threshold:
\itemize{
\item NPV = TN / (TN + FN)
}
When target_value is provided, the function finds the threshold that gets closest to
the target NPV value. Otherwise, it finds the threshold that maximizes NPV.
}
\examples{
\dontrun{
# Create sample data
set.seed(123)
data <- data.frame(
  true = factor(sample(c("Disease", "Healthy"), 100, replace = TRUE, 
                      prob = c(0.3, 0.7))),
  prob = runif(100)
)

# Example 1: Find threshold that maximizes NPV
result_max <- visualize_npv(
  true_labels = data$true,
  pred_prob = data$prob,
  positive_class = "Disease"
)

# Example 2: Find threshold closest to target NPV of 0.9
result_target <- visualize_npv(
  true_labels = data$true,
  pred_prob = data$prob,
  positive_class = "Disease",
  target_value = 0.9
)

# Access results
print(result_max$best_threshold)
print(result_target$best_npv)

# View plots
print(result_max$plot)
print(result_target$plot)
}
}
