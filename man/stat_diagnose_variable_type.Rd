% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stat-2.R
\name{stat_diagnose_variable_type}
\alias{stat_diagnose_variable_type}
\title{Diagnose Variable Types for 'Stat' Objects or Data Frames}
\usage{
stat_diagnose_variable_type(object, group_col = "group", max_unique_values = 5)
}
\arguments{
\item{object}{An object of class "Stat" or a data frame. If the object is of class "Stat",
the raw data and group column will be extracted from the object.
If it is a data frame, the function directly operates on the data.}

\item{group_col}{A character string specifying the name of the grouping column (default is "group").
This column will be excluded from the analysis if present.}

\item{max_unique_values}{A numeric value specifying the maximum number of unique values a column can have
to be considered as categorical. Columns with fewer unique values than this threshold
will be treated as categorical variables (default is 5).}
}
\value{
If the input is a "Stat" object, the updated object with the diagnosed variable types
in the "variable.types" slot. If the input is a data frame, a list containing:
\itemize{
\item \code{numeric_vars}: A character vector of numeric variables.
\item \code{categorical_vars}: A character vector of categorical variables.
\item \code{vars_to_encode}: A character vector of categorical variables that have more than 2 unique values
and should be encoded.
}
}
\description{
This function analyzes the variable types (numeric, categorical, and those needing encoding)
of a data frame or an object of class "Stat". If the input is a "Stat" object, it extracts
the raw data and group column from the object. If the input is a data frame, it directly uses
the provided data for diagnosis. It updates the "Stat" object with the diagnosed variable types.
}
\examples{
# Example 1: Diagnose variables in a "Stat" object
stat_obj <- stat_diagnose_variable_type(stat_object, group_col = "group")
print(stat_obj)

# Example 2: Diagnose variables in a data frame
result <- stat_diagnose_variable_type(data_frame)
print(result)
}
